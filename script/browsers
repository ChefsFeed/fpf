#!/usr/bin/env ruby

def launch(port)
  log_level = ENV.fetch('FPF_PHANTOM_LOG_LEVEL', 'INFO')
  log_file = "log/webdriver_#{port}.log"
  cmd =  "phantomjs"
  cmd += " --webdriver=#{port}"
  cmd += " --webdriver-logfile=#{log_file}" 
  cmd += " --webdriver-loglevel=#{log_level}"
  cmd += " --load-images=false"


  puts "Launching pjs on port #{port}"
  fork do 
    Process.exec(*cmd.split, out: "/dev/null")
  end
end

def shutdown(signal = :QUIT)
  $shutdown = true
  $browsers.values.each do |wpid| 
    Process.kill(signal, wpid)
  end
end

def save_child
  cpid = Process.wait
  if (res = $browsers.rassoc(cpid))
    port = res.first
    $browsers[port] = launch(port)
  end
end

def port_open?(port, seconds = 1)
  Timeout::timeout(seconds) do
    begin
      TCPSocket.new('localhost', port).close
      true
    rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
      false
    end
  end
rescue Timeout::Error
  false
end 

Signal.trap(:INT)  { shutdown(signal) }
Signal.trap(:QUIT) { shutdown(signal) }
Signal.trap(:CLD)  { save_child unless $shutdown }

port_start = ENV.fetch('FPF_PHANTOM_PORT_START', 8910).to_i
port_count = ENV.fetch('FPF_PHANTOM_PORT_COUNT', 10).to_i
ports = port_start...(port_start + port_count)

$shutdown = false
$browsers = {}
ports.each do |port| 
  raise "Phantom running on #{port}? Can't bind to it. " if port_open?(port)
  $browsers[port] = launch(port)
end

Process.waitall
